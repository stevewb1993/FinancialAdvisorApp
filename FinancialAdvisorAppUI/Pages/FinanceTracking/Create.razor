@page "/financetracking/create/{dateId}"
@using System.Globalization 
@inject NavigationManager _navManager
@inject IGoalRepository _goalRepo
@inject IGoalGenerationRepository _goalGenRepo
@inject IUserDetailRepository _userDetailRepo
@inject IFinancialStatRepository _finStatRepo
@inject IFinanceTypeRepository _finTypeRepo
@inject HttpClient _client
@inject ApiAuthenticationStateProvider _authentication
@inject ApiAuthenticationStateProvider _authentication
@inject IToastService _toastService


<h3 class="card-title">Financial Stats Entry</h3>


@if (!loadComplete)
{
    <LoadingMessage Message="Loading your finances..." />
}
else
{


    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add Entry" Click="@InsertRow" />
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Save" Click="@SaveFinanceStats" />
    <RadzenGrid @ref="finStatsGrid" AllowFiltering="true" AllowPaging="true" PageSize="20" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@finStats" TItem="FinancialStat">
        <Columns>

            <RadzenGridColumn Width="200px" TItem="FinancialStat" Property="FinanceDesc" Title="Finance Type">
                <EditTemplate Context="financialStat">
                    <RadzenDropDown @bind-Value="financialStat.FinanceDesc" Data="@financeTypes" TextProperty="FinanceDesc" ValueProperty="FinanceDesc" Style="width:100%" />
                </EditTemplate>
            </RadzenGridColumn>

            <RadzenGridColumn Width="200px" TItem="FinancialStat" Property="FinanceValue" Title="Value">
                <EditTemplate Context="financialStat">
                    <RadzenNumeric @bind-Value="financialStat.FinanceValue" TextProperty="FinanceValue" ValueProperty="FinanceValue" Style="width:100%" />
                </EditTemplate>
            </RadzenGridColumn>

            <RadzenGridColumn Width="200px" TItem="FinancialStat" Property="InterestRate" Title="Interest Rate">
                <EditTemplate Context="financialStat">
                    <RadzenNumeric @bind-Value="financialStat.InterestRate" TextProperty="InterestRate" ValueProperty="InterestRate" Style="width:100%" />
                </EditTemplate>
            </RadzenGridColumn>

            <RadzenGridColumn TItem="FinancialStat" Context="financialStat" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                <Template Context="financialStat">
                    <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(financialStat))">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="financialStat">
                    <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(financialStat))">
                    </RadzenButton>
                    <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(financialStat))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenGridColumn>

            <RadzenGridColumn TItem="FinancialStat" Context="financialStat" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
                <Template Context="financialStat">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(financialStat))">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="financialStat">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(financialStat))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenGridColumn>


        </Columns>
    </RadzenGrid>
}

@code {


    [Parameter]
    public string dateId { get; set; }
    private DateTime financeDate;

    private bool loadComplete = false;
    private string userId;
    private bool isExistsFinancialStats;
    private bool isExistsUserDetails;

    //Datagrid
    RadzenGrid<FinancialStat> finStatsGrid;
    List<FinancialStat> finStats = new List<FinancialStat>();
    IList<FinancialStat> originalFinStats = new List<FinancialStat>();
    private IList<FinanceType> financeTypes = new List<FinanceType>();
    private IList<FinanceType> originalFinanceTypes = new List<FinanceType>();

    //For tracking which goals are new vs original
    private IList<string> originalfinStatsGuidList = new List<string>();

    protected async override Task OnInitializedAsync()
    {
        var auth = await _authentication.GetAuthenticationStateAsync();
        userId = auth.User.FindFirst(AppConstants.UserId).Value;

        financeDate = DateTime.ParseExact(dateId, "yyyymmdd", CultureInfo.InvariantCulture);

        //load financial types for drop down editting
        financeTypes = await _finTypeRepo.Get(Endpoints.FinanceTypesEndpoint);
        originalFinanceTypes = financeTypes;

        foreach (var financeType in financeTypes)
        {
            Console.WriteLine($"finance type description: {financeType.FinanceDesc}");
        }

        //user needs to have submitted all required data to generate goals. Check these all exist. If not, redirect them
        //Check user details
        isExistsUserDetails = await _userDetailRepo.CheckUserHasRecords(Endpoints.UserDetailsEndpoint, userId);


        //Check financial stats
        isExistsFinancialStats = await _finStatRepo.CheckUserHasRecords(Endpoints.FinancialStatsEndpoint, userId);


        //Grab the existing goals of the user if they exist
        if (isExistsFinancialStats)
        {
            originalFinStats = await _finStatRepo.GetByUserId(Endpoints.FinancialStatsEndpoint, userId);

            foreach(var finStat in originalFinStats)
            {
                finStat.FinanceDesc = finStat.FinanceType.FinanceDesc;
            }

            finStats.AddRange(new List<FinancialStat>(originalFinStats));
            originalfinStatsGuidList = originalFinStats.Select(g => g.Id).ToList();
        }
        loadComplete = true;

    }


    private void EditRow(FinancialStat finStat)
    {
        finStatsGrid.EditRow(finStat);
    }

    private void SaveRow(FinancialStat finStat)
    {
        finStatsGrid.UpdateRow(finStat);
    }

    private void CancelEdit(FinancialStat finStat)
    {
        finStatsGrid.CancelEditRow(finStat);
        finStats.Remove(finStat);
    }

    private void DeleteRow(FinancialStat finStat)
    {
        if (finStats.Contains(finStat))
        {
            finStats.Remove(finStat);
            finStatsGrid.Reload();
        }
        else
        {
            finStatsGrid.CancelEditRow(finStat);
        }
    }

    private void InsertRow()
    {
        var newFinStat = new FinancialStat(financeDate, userId);
        finStatsGrid.InsertRow(newFinStat);
        finStats.Add(newFinStat);
    }

    public async void SaveFinanceStats()
    {
        bool isAllSuccess = true;
        foreach (FinancialStat finStat in finStats)
        {
            bool isSuccess;
            FinancialStat finStatToSubmit = finStat;
            //need to update this value since the ID of the finance type doesn't update when the user changes the finance type description
            Console.WriteLine($"finstat finance desc: {finStat.FinanceDesc}");
            var updatedFinanceTypeId = financeTypes.Where(x => x.FinanceDesc == finStat.FinanceDesc).FirstOrDefault().Id;
            finStatToSubmit.FinanceTypeId = updatedFinanceTypeId;

            //need to overwrite this as otherwise entity framework tries to add it to the finance types table
            finStatToSubmit.FinanceType = null;

            //if this was an original financial stat, then we need to do a put request. otherwise, post request
            if (originalfinStatsGuidList.Contains(finStatToSubmit.Id))
            {
                isSuccess = await _finStatRepo.Update(Endpoints.FinancialStatsEndpoint, finStatToSubmit, finStatToSubmit.Id);
            }
            else
            {
                isSuccess = await _finStatRepo.Create(Endpoints.FinancialStatsEndpoint, finStatToSubmit);
            }

            if (!isSuccess)
            {
                isAllSuccess = false;
                _toastService.ShowError($"Something went wrong processing financial stat: {finStatToSubmit.Id}");
            }
        }
        //for any financial stats in the original list that have been deleted, we need to submit a delete request
        List<string> newFinStatGuidList = finStats.Select(g => g.Id).ToList();
        foreach (FinancialStat originalFinStat in originalFinStats)
        {
            if (!newFinStatGuidList.Contains(originalFinStat.Id))
            {
                bool isDeleteSuccess = await _finStatRepo.Delete(Endpoints.FinancialStatsEndpoint, originalFinStat.Id);
                if (!isDeleteSuccess)
                {
                    isAllSuccess = false;
                    _toastService.ShowError($"Something went wrong processing goal: {originalFinStat.Id}");
                }
            }
        }

        if (isAllSuccess)
        {
            _toastService.ShowSuccess("Finances submitted successfully", "");
        }
        else
        {
            _toastService.ShowError("Something went wrong processing your request");
        }

        _navManager.NavigateTo(AppConstants.LinkFinanceTracking);
    }

}
