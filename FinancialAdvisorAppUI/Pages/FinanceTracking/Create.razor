@page "/financetracking/create/{dateId}"
@using System.Globalization 
@inject NavigationManager _navManager
@inject IFinancialStatRepository _financialStatRepo
@inject IFinanceTypeRepository _financeTypeRepo
@inject HttpClient _client
@inject ApiAuthenticationStateProvider _authentication
@inject IToastService _toastService

<h3 class="card-title">Create a record of your financial stats</h3>
<p>You don't need to add an entry for every stat type, but the more information you provide, the more targetted your goals will be.</p>

<br />


<EditForm Model="financeStatsFullModel" OnValidSubmit="CreateFinancialStat">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @foreach (var financeStat in financeStatsFullModel._financeStatsList)
    {
        <h5>Value of @financeStat.FinanceType.FinanceDesc</h5>
        <div class="form-group">
            <label for="FinanceValue"></label>
            <InputNumber @bind-Value="financeStat.FinanceValue" class="form-control" id="FinanceValue" />
        </div>
    }
    <button class="btn btn-primary" type="submit">
        <span class="oi oi-pencil"></span>
        Update Details
    </button>
</EditForm>




@code
{
    [Parameter]
    public string dateId { get; set; }

    //initialize models for editforms

    private FinanceStatsFullModel financeStatsFullModel = new FinanceStatsFullModel();

    //initialize variables used needed when user submit the forms (the functions can't be parameterized)
    private List<FinanceType> financeTypes = new List<FinanceType>();
    private string userId;
    private bool isExistsFinancialStats;
    private List<FinancialStat> userFinancialStats = new List<FinancialStat>();

    private DateTime financeDate;

    protected async override Task OnInitializedAsync()
    {

        var auth = await _authentication.GetAuthenticationStateAsync();
        userId = auth.User.FindFirst(AppConstants.UserId).Value;

        financeDate = DateTime.ParseExact(dateId,"yyyymmdd", CultureInfo.InvariantCulture);
        Console.WriteLine(financeDate);

        financeTypes = await _financeTypeRepo.Get(Endpoints.FinanceTypesEndpoint) as List<FinanceType>;

        isExistsFinancialStats = await _financialStatRepo.CheckUserHasRecords(Endpoints.FinancialStatsEndpoint, userId);

        if (isExistsFinancialStats)
        {
            //only attempt to retreive existing financial stats if they exist. otherwise 404 response will break the page
            //it's used for checking if submissions will be a post or put request
            userFinancialStats = await _financialStatRepo.GetByUserId(Endpoints.FinancialStatsEndpoint, userId) as List<FinancialStat>;
        }

        foreach (FinanceType financeType in financeTypes)
        {

            FinancialStat statToAdd = new FinancialStat(financeDate, financeType.Id, financeType);
            financeStatsFullModel._financeStatsList.Add(statToAdd);

        }
    }


    private async void CreateFinancialStat()
    {
        bool processSucceeded = true;

        foreach (FinancialStat _financeStat in financeStatsFullModel._financeStatsList)
        {
            FinancialStat financeStat = _financeStat;
            financeStat.FinanceType = null; //this stops Entity Framework trying to create a new record for the finance type
            financeStat.UserId = userId;
            bool isSuccess = false;
            bool isExistsPreviousRecord = false;

            if (isExistsFinancialStats)
            {
                var previousRecords = userFinancialStats.Where(x => x.FinanceDate == financeDate & x.FinanceTypeId == financeStat.FinanceTypeId).ToList();
                isExistsPreviousRecord = previousRecords.Count > 0;
                if (isExistsPreviousRecord) //record already exists. take existing request and submit put request
                {
                    string existingGuid = previousRecords.First().Id;
                    financeStat.Id = existingGuid;// = new FinancialStat(financeDateModel.financeDate, financeTypeId, financeValue, userId, existingGuid);
                    isSuccess = await _financialStatRepo.Update(Endpoints.FinancialStatsEndpoint, financeStat, existingGuid);
                    if(isSuccess)
                    {
                        userFinancialStats.Remove(previousRecords.First());
                        userFinancialStats.Add(financeStat);
                    }
                }
            }
            if (!isExistsPreviousRecord | !isExistsPreviousRecord) //no previous entry, create new guid and submit post request
            {
                Guid newRecordGuid = Guid.NewGuid();
                financeStat.Id = newRecordGuid.ToString();
                isSuccess = await _financialStatRepo.Create(Endpoints.FinancialStatsEndpoint, financeStat);
                if(isSuccess)
                {
                    userFinancialStats.Add(financeStat);
                    isExistsFinancialStats = true;
                }

            }
            if (!isSuccess)
            {
                processSucceeded = false;
                _toastService.ShowError("Something went wong processing: " + financeStat.FinanceType.FinanceDesc);
            }

        }

        if (processSucceeded) _toastService.ShowSuccess("Details submitted successfully", "");
        else _toastService.ShowError("Something went wrong");



    }



    public class FinanceStatsFullModel
    {
        public List<FinancialStat> _financeStatsList;
        public FinanceStatsFullModel()
        {
            _financeStatsList = new List<FinancialStat>();
        }
    }

}
