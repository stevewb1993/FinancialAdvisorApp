@page "/financialstats/create/"
@inject NavigationManager _navManager
@inject IFinancialStatRepository _financialStatRepo
@inject IFinanceTypeRepository _financeTypeRepo
@inject HttpClient _client
@inject ApiAuthenticationStateProvider _authentication
@inject IToastService _toastService

<h3 class="card-title">Create a record of your financial stats</h3>
<p>You don't need to add an entry for every stat type, but the more information you provide, the more targetted your goals will be.</p>

<br />


@if (!isDateSelected)
{
    <EditForm Model="financeDateModel" OnValidSubmit="ConfirmDate">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="FinanceDate">As of date</label>
            <InputDate @bind-Value="financeDateModel.financeDate" class="form-control" id="FinanceDate" />
        </div>
        <button class="btn btn-primary" type="submit">
            <span class="oi oi-pencil"></span>
            Confirm Date
        </button>
    </EditForm>
}
else
{
    @*<h6>@financeDateModel.financeDate.ToString("dd MMMM yyyy")</h6>
    <br />
    foreach (FinanceType financeType in financeTypes)
    {
        FinancialStat financialStatModel = new FinancialStat();

        <EditForm Model="financialStatModel" OnValidSubmit="returnVoid">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <h5>Value of @financeType.FinanceDesc</h5>
            <div class="form-group">
                <label for="FinanceValue">Value</label>
                <InputNumber @bind-Value="financialStatModel.FinanceValue" class="form-control" id="FinanceValue" />
            </div>
            <button class="btn btn-primary" type="submit" @onclick="() => CreateFinancialStat(financialStatModel.FinanceValue, financeType.Id)">
                <span class="oi oi-pencil"></span>
                Update Details
            </button>
        </EditForm>
        <br />
    }*@


    <h6>@financeDateModel.financeDate.ToString("dd MMMM yyyy")</h6>
    <br />
    for (int i = 0; i < financialStatModelList.Count; i++)
    {


        <EditForm Model="financialStatModelList[i]" OnValidSubmit="returnVoid">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <h5>Value of @financeTypes[i].FinanceDesc</h5>
            <div class="form-group">
                <label for="FinanceValue">Value</label>
                <InputNumber @bind-Value="financialStatModelList[i].FinanceValue" class="form-control" id="FinanceValue" />
            </div>
            <button class="btn btn-primary" type="submit">
                <span class="oi oi-pencil"></span>
                Update Details
            </button>
        </EditForm>
        <br />
    }
}


@code
{

    private FinanceDate financeDateModel = new FinanceDate();
    private string userId;
    private IList<FinanceType> financeTypes;
    private IList<FinancialStat> financialStatModelList;

    private bool isExistsFinancialStats;

    private bool isDateSelected = false;

    private IList<FinancialStat> userFinancialStats = new List<FinancialStat>();


    protected async override Task OnInitializedAsync()
    {

        var auth = await _authentication.GetAuthenticationStateAsync();
        userId = auth.User.FindFirst(AppConstants.UserId).Value;

        financeTypes = await _financeTypeRepo.Get(Endpoints.FinanceTypesEndpoint);



        isExistsFinancialStats = await _financialStatRepo.CheckUserHasRecords(Endpoints.FinancialStatsEndpoint, userId);

        if (isExistsFinancialStats)
        {
            userFinancialStats = await _financialStatRepo.GetByUserId(Endpoints.FinancialStatsEndpoint, userId);
        }
    }


    private async void CreateFinancialStat(decimal financeValue, string financeTypeId)
    {
        bool isSuccess = false;
        bool isExistsPreviousRecord = false;

        FinancialStat financialStatToSubmit;

        if (isExistsFinancialStats)
        {
            var previousRecords = userFinancialStats.Where(x => x.FinanceDate == financeDateModel.financeDate & x.FinanceTypeId == financeTypeId).ToList();
            isExistsPreviousRecord = previousRecords.Count > 0;
            if (isExistsPreviousRecord) //record already exists. take existing request and submit put request
            {
                string existingGuid = previousRecords.First().Id;
                financialStatToSubmit = new FinancialStat(financeDateModel.financeDate, financeTypeId, financeValue, userId, existingGuid);
                isSuccess = await _financialStatRepo.Update(Endpoints.FinancialStatsEndpoint, financialStatToSubmit, existingGuid);
                userFinancialStats.Remove(previousRecords.First());
                userFinancialStats.Add(financialStatToSubmit);
            }
        }
        if (!isExistsPreviousRecord) //no previous entry, create new guid and submit post request
        {
            Guid newRecordGuid = Guid.NewGuid();
            financialStatToSubmit = new FinancialStat(financeDateModel.financeDate, financeTypeId, financeValue, userId, newRecordGuid.ToString());
            isSuccess = await _financialStatRepo.Create(Endpoints.FinancialStatsEndpoint, financialStatToSubmit);
            userFinancialStats.Add(financialStatToSubmit);
            isExistsFinancialStats = true;
        }


        if (isSuccess) _toastService.ShowSuccess("Details submitted successfully", "");
        else _toastService.ShowError("Something went wrong");

    }

    private async void CreateFinancialStat()
    {
        bool isSuccess = false;
        bool isExistsPreviousRecord = false;

        FinancialStat financialStatToSubmit;

        if (isExistsFinancialStats)
        {
            var previousRecords = userFinancialStats.Where(x => x.FinanceDate == financeDateModel.financeDate & x.FinanceTypeId == financeTypeId).ToList();
            isExistsPreviousRecord = previousRecords.Count > 0;
            if (isExistsPreviousRecord) //record already exists. take existing request and submit put request
            {
                string existingGuid = previousRecords.First().Id;
                financialStatToSubmit = new FinancialStat(financeDateModel.financeDate, financeTypeId, financeValue, userId, existingGuid);
                isSuccess = await _financialStatRepo.Update(Endpoints.FinancialStatsEndpoint, financialStatToSubmit, existingGuid);
                userFinancialStats.Remove(previousRecords.First());
                userFinancialStats.Add(financialStatToSubmit);
            }
        }
        if (!isExistsPreviousRecord) //no previous entry, create new guid and submit post request
        {
            Guid newRecordGuid = Guid.NewGuid();
            financialStatToSubmit = new FinancialStat(financeDateModel.financeDate, financeTypeId, financeValue, userId, newRecordGuid.ToString());
            isSuccess = await _financialStatRepo.Create(Endpoints.FinancialStatsEndpoint, financialStatToSubmit);
            userFinancialStats.Add(financialStatToSubmit);
            isExistsFinancialStats = true;
        }


        if (isSuccess) _toastService.ShowSuccess("Details submitted successfully", "");
        else _toastService.ShowError("Something went wrong");

    }

    private async void returnVoid()
    {

    }


    private void ConfirmDate()
    {
        isDateSelected = true;
        foreach (FinanceType financeType in financeTypes)
        {
            financialStatModelList.Add(new FinancialStat(financeDateModel.financeDate, financeType.Id));

        }
    }

    public class FinanceDate
    {
        public DateTime financeDate { get; set; }
    }

}
