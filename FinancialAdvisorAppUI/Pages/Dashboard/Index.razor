@page "/dashboard/"

@using System.Globalization

@inject NavigationManager _navManager
@inject IGoalRepository _goalRepo
@inject IFinancialStatRepository _finStatRepo
@inject IUserDetailRepository _userDetailRepo
@inject IFinanceTypeRepository _finTypeRepo
@inject HttpClient _client
@inject ApiAuthenticationStateProvider _authentication

<h3 class="card-title">Dashboard</h3>
<hr />
<br />

@if (!loadComplete)
{
    <LoadingMessage Message="Loading your details..." />
}
else
{
    @if (!isExistsUserDetails)
    {
        <div>
            Please provide some additional information about yourself so we can create suitable goals for you
        </div>


        <button class="btn btn-outline-secondary" @onclick="@(e => _navManager.NavigateTo(AppConstants.LinkUserDetails))">
            <span class="oi oi-fork"></span>
            Update user details
        </button>
    }

    @if (!isExistsFinancialStats)
    {
        <div>
            Please provide some additional information about your finances so we can create suitable goals for you
        </div>
    }
    <button class="btn btn-outline-secondary" @onclick="@(e => _navManager.NavigateTo(AppConstants.LinkFinanceTracking))">
        <span class="oi oi-fork"></span>
        Update financial stats
    </button>

    @if (!isExistsGoals & isExistsFinancialStats)
    {
        <div>
            You haven't create any goals yet!
        </div>
    }
    @if (isExistsFinancialStats)
    {
        <button class="btn btn-outline-secondary" @onclick="@(e => _navManager.NavigateTo(AppConstants.LinkGoalsUpdate))">
            <span class="oi oi-fork"></span>
            Update Goals
        </button>
    }


    @if (isExistsFinancialStats)
    {
        <div style="margin-top:50px">

            <RadzenCard Style="width:90%">
                <h5>Financial Tracker</h5>
                <div class="row">
                    <div class="col-12">
                        <label>Smooth <RadzenCheckBox @bind-Value="@financeTrackerSmooth" Name="smooth"></RadzenCheckBox></label>
                        <RadzenChart>
                            @foreach (var account in financialStatsBrokenDownFiltered)
                            {
                                string shortTitle = account.Key.FinanceDesc.Substring(0, Math.Min(20, account.Key.FinanceDesc.Length));
                                <RadzenLineSeries Smooth="@financeTrackerSmooth" Data="@account.Value" CategoryProperty="FinanceDate" Title="@shortTitle" LineType="LineType.Dashed" ValueProperty="FinanceValue">
                                    <RadzenMarkers MarkerType="MarkerType.Square" />
                                </RadzenLineSeries>
                                <RadzenCategoryAxis Padding="20" FormatString="{0:dd MMM yyyy}" />
                                <RadzenValueAxis Formatter="@FormatAsGBP">
                                    <RadzenGridLines Visible="true" />
                                    <RadzenAxisTitle Text="Value" />
                                </RadzenValueAxis>
                            }
                        </RadzenChart>
                    </div>
                </div>
            </RadzenCard>
        </div>

    }

    @if (isExistsFinancialStats & isExistsGoals)
        {
            <div style="margin-top:50px">

                <RadzenCard Style="width:90%">
                    <h5>Goals Tracker</h5>
                    <RadzenDropDown AllowClear="true" TValue="string" @bind-Value=@selectedFinanceTypeDescription
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                    Data=@financeTypes TextProperty="FinanceDesc" ValueProperty="FinanceDesc" Change=@(e => UpdateGoalChart()) />
                    <div class="row">
                        <div class="col-12">
                            <label>Smooth <RadzenCheckBox @bind-Value="@goalTrackerSmooth" Name="smooth"></RadzenCheckBox></label>
                            <RadzenChart>

                                <RadzenLineSeries Smooth="@goalTrackerSmooth" Data="@financialStatsForGoalTracker" CategoryProperty="FinanceDate" Title="Actuals" LineType="LineType.Dashed" ValueProperty="FinanceValue">
                                    <RadzenMarkers MarkerType="MarkerType.Square" />
                                </RadzenLineSeries>

                                <RadzenLineSeries Smooth="@financeTrackerSmooth" Data="@selectedGoals" CategoryProperty="DueDate" Title="Goals" LineType="LineType.Dashed" ValueProperty="GoalValue">
                                    <RadzenMarkers MarkerType="MarkerType.Square" />
                                </RadzenLineSeries>

                                <RadzenCategoryAxis Padding="20" FormatString="{0:MMM yyyy}" />
                                <RadzenValueAxis Formatter="@FormatAsGBP">
                                    <RadzenGridLines Visible="true" />
                                    <RadzenAxisTitle Text="Value" />
                                </RadzenValueAxis>

                            </RadzenChart>
                        </div>
                    </div>
                </RadzenCard>
            </div>

        }
}



@code {



    private bool isExistsUserDetails;
    private bool isExistsGoals;
    private bool isExistsFinancialStats;
    private bool loadComplete = false;

    List<FinanceType> financeTypes = new List<FinanceType>();
    List<FinancialStat> fullFinancialStats = new List<FinancialStat>();

    //details for financial tracker chart
    bool financeTrackerSmooth = false;
    Dictionary<FinanceType, List<FinancialStat>> financialStatsBrokenDown = new Dictionary<FinanceType, List<FinancialStat>>();
    Dictionary<FinanceType, List<FinancialStat>> financialStatsBrokenDownFiltered = new Dictionary<FinanceType, List<FinancialStat>>();

    //details for goal tracker chart
    bool goalTrackerSmooth = false;
    string selectedFinanceTypeDescription;
    FinanceType financeTypeSelected;
    List<FinancialStat> financialStatsForGoalTracker = new List<FinancialStat>();
    List<Goal> allGoals = new List<Goal>();
    List<Goal> selectedGoals = new List<Goal>();


    protected async override Task OnInitializedAsync()
    {

        var auth = await _authentication.GetAuthenticationStateAsync();
        int userId = Int32.Parse(auth.User.FindFirst(AppConstants.UserId).Value);

        //Check user details
        isExistsUserDetails = await _userDetailRepo.CheckUserHasCompletedDetailsForm(userId);

        //Check goals
        isExistsGoals = await _goalRepo.CheckUserHasRecords(Endpoints.GoalsEndpoint, userId);
        Console.WriteLine(isExistsGoals);

        //Check financial stats
        isExistsFinancialStats = await _finStatRepo.CheckUserHasRecords(Endpoints.FinancialStatsEndpoint, userId);
        Console.WriteLine(isExistsFinancialStats);
        loadComplete = true;

        if (isExistsFinancialStats) //create dashboard charts
        {

            fullFinancialStats = (List<FinancialStat>)await _finStatRepo.GetByUserId(Endpoints.FinancialStatsEndpoint, userId);
            financeTypes = (List<FinanceType>)await _finTypeRepo.Get(Endpoints.FinanceTypesEndpoint);

            //aggregate daily finances of each category
            var aggregatedFinancialStats = FinancialStatsHelper.AggregateDailyFinancialStatsValue(fullFinancialStats);

            //group the different categories of financial stats so they can be split out into different lines in the line charts
            financialStatsBrokenDown = FinancialStatsHelper.SplitOutFinancialStatsByCategory(financeTypes, aggregatedFinancialStats);

            //remove categories where the user has never recorded any data
            financialStatsBrokenDownFiltered = FinancialStatsHelper.RemoveEmptyCategories(financialStatsBrokenDown);

            selectedFinanceTypeDescription = financeTypes.FirstOrDefault().FinanceDesc;
            financeTypeSelected = financeTypes.FirstOrDefault();
            financialStatsForGoalTracker = financialStatsBrokenDown[financeTypeSelected];
        }

        if (isExistsGoals)
        {
            allGoals = (List<Goal>)await _goalRepo.GetByUserId(Endpoints.GoalsEndpoint, userId);
            selectedGoals = allGoals.Where(g => g.FinanceType.FinanceDesc == selectedFinanceTypeDescription).ToList();
        }

        loadComplete = true;
    }


    private string FormatAsGBP(object value)
    {
        //return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-GB"));
        //return String.Format(new System.Globalization.CultureInfo("en-GB"), "{0:C}", (double)value);
        return String.Format(CultureInfo.GetCultureInfo("en-GB"), "{0:C}", (double)value);
    }

    private void UpdateGoalChart()
    {
        financeTypeSelected = financeTypes.Where(f => f.FinanceDesc == selectedFinanceTypeDescription).FirstOrDefault();
        financialStatsForGoalTracker = financialStatsBrokenDown[financeTypeSelected];
        selectedGoals = allGoals.Where(g => g.FinanceType.FinanceDesc == selectedFinanceTypeDescription).ToList();
    }



}
