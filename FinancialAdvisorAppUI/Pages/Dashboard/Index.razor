@page "/dashboard/"

@using System.Globalization

@inject NavigationManager _navManager
@inject IGoalRepository _goalRepo
@inject IFinancialStatRepository _finStatRepo
@inject IUserDetailRepository _userDetailRepo
@inject IFinanceTypeRepository _finTypeRepo
@inject HttpClient _client
@inject ApiAuthenticationStateProvider _authentication

<h3 class="card-title">Dashboard</h3>
<hr />
<br />

@if (!loadComplete)
{
    <LoadingMessage Message="Loading your details..." />
}
else
{
    @if (!isExistsUserDetails)
    {
        <div>
            Please provide some additional information about yourself so we can create suitable goals for you
        </div>


        <button class="btn btn-outline-secondary" @onclick="@(e => _navManager.NavigateTo(linkUserDetails))">
            <span class="oi oi-fork"></span>
            Update user details
        </button>
    }

    @if (!isExistsFinancialStats)
    {
        <div>
            Please provide some additional information about your finances so we can create suitable goals for you
        </div>
    }
    <button class="btn btn-outline-secondary" @onclick="@(e => _navManager.NavigateTo(AppConstants.LinkFinanceTracking))">
        <span class="oi oi-fork"></span>
        Update financial stats
    </button>

    @if (!isExistsGoals & isExistsFinancialStats)
    {
        <div>
            You haven't create any goals yet!
        </div>
    }
    @if (isExistsFinancialStats)
    {
        <button class="btn btn-outline-secondary" @onclick="@(e => _navManager.NavigateTo(AppConstants.LinkGoalsUpdate))">
            <span class="oi oi-fork"></span>
            Update Goals
        </button>
    }




    @if (isExistsFinancialStats)
    {
        
        foreach (var account in financialStatsBrokenDown)
        {
            <div class="row">
                <div class="col-md-6 col-sm-12 p-4">
                    <label>Smooth <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox></label>
                    <RadzenChart>
                        <RadzenLineSeries Smooth="@smooth" Data="@account.Value" CategoryProperty="FinanceDate" Title="2019" LineType="LineType.Dashed" ValueProperty="FinanceValue">
                            <RadzenMarkers MarkerType="MarkerType.Square" />
                        </RadzenLineSeries>
                        <RadzenCategoryAxis Padding="20" FormatString="{0:MMM}" />
                        <RadzenValueAxis Formatter="@FormatAsGBP">
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="Value" />
                        </RadzenValueAxis>
                    </RadzenChart>
                </div>
            </div>
        }

    }
}



@code {



    private bool isExistsUserDetails;
    private bool isExistsGoals;
    private bool isExistsFinancialStats;
    private string linkUserDetails = "/userdetails/";
    private string linkUpdateFinStats = "/financialstats/create/";
    private bool loadComplete = false;

    //details for charts
    bool smooth = false;

    List<FinancialStat> fullFinancialStats = new List<FinancialStat>();
    List<FinancialStat> currentAccountStats = new List<FinancialStat>();
    Dictionary<FinanceType, List<FinancialStat>> financialStatsBrokenDown = new Dictionary<FinanceType, List<FinancialStat>>();


    protected async override Task OnInitializedAsync()
    {

        var auth = await _authentication.GetAuthenticationStateAsync();
        int userId = Int32.Parse(auth.User.FindFirst(AppConstants.UserId).Value);
        Console.WriteLine($"user id: {userId}");

        //Check user details
        isExistsUserDetails = await _userDetailRepo.CheckUserHasCompletedDetailsForm(userId);
        Console.WriteLine(isExistsUserDetails);

        //Check goals
        isExistsGoals = await _goalRepo.CheckUserHasRecords(Endpoints.GoalsEndpoint, userId);
        Console.WriteLine(isExistsGoals);

        //Check financial stats
        isExistsFinancialStats = await _finStatRepo.CheckUserHasRecords(Endpoints.FinancialStatsEndpoint, userId);
        Console.WriteLine(isExistsFinancialStats);
        loadComplete = true;

        List<FinanceType> financeTypes = new List<FinanceType>();




        if (isExistsFinancialStats)
        {
            fullFinancialStats = (List<FinancialStat>)await _finStatRepo.GetByUserId(Endpoints.FinancialStatsEndpoint, userId);
            //split out finnace stats into the different classes
            //currentAccountStats = fullFinancialStats.Where(f => f.FinanceTypeId == 1).ToList();
            financeTypes = (List<FinanceType>)await _finTypeRepo.Get(Endpoints.FinanceTypesEndpoint);
            financialStatsBrokenDown = financialstatshelper.SplitOutFinancialStatsByCategory(financeTypes, fullFinancialStats);
        }


    }


    string FormatAsGBP(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-GB"));
    }
}
