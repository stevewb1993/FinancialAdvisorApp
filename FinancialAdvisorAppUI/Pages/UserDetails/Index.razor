@page "/userdetails/"

@inject NavigationManager _navManager
@inject IGoalRepository _goalRepo
@inject IUserDetailRepository _userDetailRepo
@inject HttpClient _client
@inject ApiAuthenticationStateProvider _authentication
@inject IToastService _toastService

<h3 class="card-title">Profile</h3>

<br />


<p>
    Please provide some information about yourself so we can create suitable goals for you
</p>


<EditForm Model="userDetailModel" OnValidSubmit="CreateUserDetail">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="DateOfBirth">Date of Birth</label>
        <InputDate @bind-Value="userDetailModel.DateOfBirth" class="form-control" id="DateOfBirth" />
    </div>
    <div class="form-group">
        <label for="HighestEducation">Highest Level of Education</label>
        <select @bind="userDetailModel.HighestEducation" class="form-control" id="HighestEducation">
            <option value="GCSE">GCSE</option>
            <option value="A-Level">A-Level</option>
            <option value="BSc">BSc</option>
            <option value="Post University">Post University</option>

        </select>
    </div>
    <div class="form-group">
        <label for="RetirementAge">Target Retirement Age</label>
        <InputNumber @bind-Value="userDetailModel.RetirementAge" class="form-control" id="RetirementAge" />
    </div>
    <button class="btn btn-primary" type="submit">
        <span class="oi oi-pencil"></span>
        Update Details
    </button>
</EditForm>





@code
{

    private UserDetail userDetailModel = new UserDetail();

    private bool isExistsUserDetails;
    private bool isExistsGoals;

    private string userId;



    protected async override Task OnInitializedAsync()
    {

        var auth = await _authentication.GetAuthenticationStateAsync();
        userId = auth.User.FindFirst(AppConstants.UserId).Value;

        //Check user details
        isExistsUserDetails = await _userDetailRepo.CheckUserHasRecords(Endpoints.UserDetailsEndpoint, userId);
        if(isExistsUserDetails)
        {
            userDetailModel = await _userDetailRepo.GetById(Endpoints.UserDetailsEndpoint, userId);
        }

    }


    private async void CreateUserDetail()
    {
        bool isSuccess;

        var auth = await _authentication.GetAuthenticationStateAsync();
        userDetailModel.Id = auth.User.FindFirst(AppConstants.UserId).Value;

        if (!isExistsUserDetails)
        {
            isSuccess = await _userDetailRepo.Create(Endpoints.UserDetailsEndpoint, userDetailModel);
        }
        else
        {
            isSuccess = await _userDetailRepo.Update(Endpoints.UserDetailsEndpoint, userDetailModel, userId);
        }

        if (isSuccess)
        {
            _toastService.ShowSuccess("Details submitted successfully", "");
        }
        else
        {
            _toastService.ShowError("Something went wrong");
        }
    }

}
