@page "/goals/"

@inject NavigationManager _navManager
@inject IGoalRepository _goalRepo
@inject IFinancialStatRepository _finStatRepo
@inject IUserDetailRepository _userDetailRepo
@inject HttpClient _client
@inject ApiAuthenticationStateProvider _authentication

<h3 class="card-title">Your goals</h3>
<hr />
<br />

@if (!isExistsUserDetails)
{
    <div>
        Please provide some additional information about yourself so we can create suitable goals for you
    </div>


    <button class="btn btn-outline-secondary" @onclick="@(e => _navManager.NavigateTo(linkUserDetails))">
        <span class="oi oi-fork"></span>
        Update user details
    </button>
}

@if (!isExistsFinancialStats)
{
    <div>
        Please provide some additional information about your finances so we can create suitable goals for you
    </div>
    <button class="btn btn-outline-secondary" @onclick="@(e => _navManager.NavigateTo(linkUpdateFinStats))">
        <span class="oi oi-fork"></span>
        Update financial stats
    </button>
}

@if (isExistsUserDetails & isExistsFinancialStats)
{
    <button class="btn btn-outline-secondary">
        <span class="oi oi-fork"></span>
        Update your goals!
    </button>
}

@if(isExistsGoals)
{
    <p>Placeholder for goals dashboard</p>
}
else
{
    <p>You haven't set up any goals yet!</p>
}




@code { 
    private IList<Goal> goalModel;

    private UserDetail userDetailModel;

    private bool isExistsUserDetails;
    private bool isExistsGoals;
    private bool isExistsFinancialStats;
    private string linkUserDetails = "/userdetails/";
    private string linkUpdateFinStats = "/financialstats/create/";



    protected async override Task OnInitializedAsync()
    {

        var auth = await _authentication.GetAuthenticationStateAsync();
        string userId = auth.User.FindFirst(AppConstants.UserId).Value;
        Console.WriteLine($"user id: {userId}");

        //Check user details
        isExistsUserDetails = await _userDetailRepo.CheckUserHasRecords(Endpoints.UserDetailsEndpoint, userId);
        Console.WriteLine(isExistsUserDetails);

        //Check goals
        isExistsGoals = await _goalRepo.CheckUserHasRecords(Endpoints.GoalsEndpoint, userId);
        Console.WriteLine(isExistsGoals);

        //Check goals
        isExistsFinancialStats = await _finStatRepo.CheckUserHasRecords(Endpoints.FinancialStatsEndpoint, userId);
        Console.WriteLine(isExistsFinancialStats);



    }
}
