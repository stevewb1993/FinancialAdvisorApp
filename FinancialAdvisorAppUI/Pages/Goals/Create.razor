@page "/goals/create/"

@inject NavigationManager _navManager
@inject IGoalRepository _goalRepo
@inject IGoalGenerationRepository _goalGenRepo
@inject IUserDetailRepository _userDetailRepo
@inject IFinancialStatRepository _finStatRepo
@inject IFinanceTypeRepository _finTypeRepo
@inject HttpClient _client
@inject ApiAuthenticationStateProvider _authentication
@inject IToastService _toastService


<h3 class="card-title">Goals Refresh</h3>


@if (!loadComplete)
{
    <LoadingMessage Message="Loading your goals..." />
}
else
{

    //width: 100 %; display: block;

    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Generate new intelligent goals" Click="@GenerateNewGoals" />
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add Manual Entry" Click="@InsertRow" />
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Save" Click="@SaveGoals" />
    <RadzenGrid @ref="goalsGrid" AllowFiltering="true" AllowPaging="true" PageSize="20" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@goals" TItem="Goal">
        <Columns>

            <RadzenGridColumn Width="100px" TItem="Goal" Property="FinanceDesc" Title="Goal Type">
                <EditTemplate Context="goal">
                    <RadzenDropDown @bind-Value="goal.FinanceDesc" Data="@financeTypes" TextProperty="FinanceDesc" ValueProperty="FinanceDesc" Style="width:100%" />
                </EditTemplate>
            </RadzenGridColumn>

            <RadzenGridColumn Width="200px" TItem="Goal" Property="Justification" Title="Justification">
                <EditTemplate Context="goal">
                    <RadzenTextArea @bind-Value="goal.Justification" Style="width:100%; display: block" Name="Justification" Rows="10">
                        <template>
                            <p style="white-space:pre-wrap">@goal.Justification</p>
                        </template>
                    </RadzenTextArea>
                </EditTemplate>
            </RadzenGridColumn>

            <RadzenGridColumn Width="100px" TItem="Goal" Property="GoalValue" Title="Goal Value">
                <EditTemplate Context="goal">
                    <RadzenNumeric @bind-Value="goal.GoalValue" Data="@goals" TextProperty="GoalValue" ValueProperty="GoalValue" Style="width:100%" />
                </EditTemplate>
            </RadzenGridColumn>

            <RadzenGridColumn Width="100px" TItem="Goal" Property="GoalStartDate" Title="Start Date">
                <Template Context="goal">
                    @String.Format("{0:d}", goal.GoalStartDate)
                </Template>
                <EditTemplate Context="goal">
                    <RadzenDatePicker @bind-Value="goal.GoalStartDate" Style="width:100%" />
                </EditTemplate>
            </RadzenGridColumn>

            <RadzenGridColumn Width="100px" TItem="Goal" Property="DueDate" Title="Due Date">
                <Template Context="goal">
                    @String.Format("{0:d}", goal.DueDate)
                </Template>
                <EditTemplate Context="goal">
                    <RadzenDatePicker @bind-Value="goal.DueDate" Style="width:100%" />
                </EditTemplate>
            </RadzenGridColumn>

            <RadzenGridColumn TItem="Goal" Context="goal" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                <Template Context="goal">
                    <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(goal))">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="goal">
                    <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(goal))">
                    </RadzenButton>
                    <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(goal))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenGridColumn>

            <RadzenGridColumn TItem="Goal" Context="goal" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
                <Template Context="goal">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(goal))">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="goal">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(goal))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenGridColumn>


        </Columns>
    </RadzenGrid>
}

@code {

    private bool loadComplete = false;
    private int userId;
    private bool isExistsFinancialStats;
    private bool isExistsGoals;
    private bool isExistsUserDetails;

    //Datagrid
    RadzenGrid<Goal> goalsGrid;
    List<Goal> goals = new List<Goal>();
    IList<FinanceType> financeTypes = new List<FinanceType>();
    IList<Goal> originalGoals = new List<Goal>();

    //For tracking which goals are new vs original
    private IList<int?> originalGoalsGuidList = new List<int?>();

    protected async override Task OnInitializedAsync()
    {
        var auth = await _authentication.GetAuthenticationStateAsync();
        userId = Int32.Parse(auth.User.FindFirst(AppConstants.UserId).Value);

        //load financial types for drop down editting
        financeTypes = await _finTypeRepo.Get(Endpoints.FinanceTypesEndpoint);

        //user needs to have submitted all required data to generate goals. Check these all exist. If not, redirect them
        //Check user details
        isExistsUserDetails = await _userDetailRepo.CheckUserHasRecords(Endpoints.UserDetailsEndpoint, userId);

        //Check goals
        isExistsGoals = await _goalRepo.CheckUserHasRecords(Endpoints.GoalsEndpoint, userId);

        //Check financial stats
        isExistsFinancialStats = await _finStatRepo.CheckUserHasRecords(Endpoints.FinancialStatsEndpoint, userId);

        if (!isExistsUserDetails | !isExistsFinancialStats)
        {
            _navManager.NavigateTo(AppConstants.LinkGoals);
        }
        else
        {
            //Grab the existing goals of the user if they exist
            if (isExistsGoals)
            {
                originalGoals = await _goalRepo.GetByUserId(Endpoints.GoalsEndpoint, userId);

                foreach(var goal in originalGoals)
                {
                    goal.FinanceDesc = goal.FinanceType.FinanceDesc;
                }

                goals.AddRange(new List<Goal>(originalGoals));
                originalGoalsGuidList = originalGoals.Select(g => g.Id).ToList();
            }
            loadComplete = true;
        }
    }

    private async void GenerateNewGoals()
    {
        var newGoals = await _goalGenRepo.GetById(Endpoints.GoalGenerationEndpoint, userId);

        if(newGoals.Count > 0)
        {
            foreach (var goal in newGoals)
            {
                goal.FinanceDesc = goal.FinanceType.FinanceDesc;
                goals.AddRange(newGoals);
                await goalsGrid.Reload();
                _toastService.ShowSuccess("New goals successfully generated");
            }
        }
        else
        {
            _toastService.ShowWarning("Based on your financial information, we have no goals we can suggest. Feel free to create your own!");
        }
    }

    void EditRow(Goal goal)
    {
        goalsGrid.EditRow(goal);
    }

    void SaveRow(Goal goal)
    {
        goalsGrid.UpdateRow(goal);
    }

    void CancelEdit(Goal goal)
    {
        goalsGrid.CancelEditRow(goal);
    }

    void DeleteRow(Goal goal)
    {
        if (goals.Contains(goal))
        {
            goals.Remove(goal);
            goalsGrid.Reload();
        }
        else
        {
            goalsGrid.CancelEditRow(goal);
        }
    }

    void InsertRow()
    {
        var goaltoAdd = new Goal(userId, "Add your own justification");
        goalsGrid.InsertRow(goaltoAdd);
        goals.Add(goaltoAdd);
    }



    public async void SaveGoals()
    {
        bool isAllSuccess = true;
        foreach (Goal goal in goals)
        {
            bool isSuccess;
            Goal goalToSubmit = goal;
            //need to update this value since the ID of the finance type doesn't update when the user changes the finance type description
            goalToSubmit.FinanceTypeId = financeTypes.Where(x => x.FinanceDesc == goalToSubmit.FinanceType.FinanceDesc).FirstOrDefault().Id;

            //need to overwrite this as otherwise entity framework tries to add it to the finance types table
            goalToSubmit.FinanceType = null;

            //if this was an original goal, then we need to do a put request. otherwise, post request
            if (originalGoalsGuidList.Contains(goal.Id))
            {
                isSuccess = await _goalRepo.Update(Endpoints.GoalsEndpoint, goalToSubmit, goalToSubmit.Id ?? 0);
            }
            else
            {
                isSuccess = await _goalRepo.Create(Endpoints.GoalsEndpoint, goalToSubmit);
            }

            if (!isSuccess)
            {
                isAllSuccess = false;
                _toastService.ShowError($"Something went wrong processing goal: {goalToSubmit.Id}");
            }
        }
        //for any goals in the original list that have been deleted, we need to submit a delete request
        List<int?> newGoalsGuidList = goals.Select(g => g.Id).ToList();
        foreach (Goal originalGoal in originalGoals)
        {
            if (!newGoalsGuidList.Contains(originalGoal.Id))
            {
                bool isDeleteSuccess = await _goalRepo.Delete(Endpoints.GoalsEndpoint, originalGoal.Id ?? 0);
                if (!isDeleteSuccess)
                {
                    isAllSuccess = false;
                    _toastService.ShowError($"Something went wrong processing goal: {originalGoal.Id}");
                }
            }
        }

        if (isAllSuccess)
        {
            _toastService.ShowSuccess("Goals submitted successfully", "");
        }
        else
        {
            _toastService.ShowError("Something went wrong processing your request");
        }

        _navManager.NavigateTo(AppConstants.LinkGoals);
    }

}
